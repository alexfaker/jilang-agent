import{J as l,m as e}from"./index-f19ebc4a.js";const n=l("workflow",{state:()=>({workflows:[],currentWorkflow:null,loading:!1,error:null,pagination:{page:1,limit:10,total:0},filters:{status:"",search:""}}),getters:{getWorkflowById:t=>r=>t.workflows.find(o=>o.id===r)||null,filteredWorkflows:t=>{let r=[...t.workflows];if(t.filters.status&&(r=r.filter(o=>o.status===t.filters.status)),t.filters.search){const o=t.filters.search.toLowerCase();r=r.filter(s=>s.name.toLowerCase().includes(o)||s.description&&s.description.toLowerCase().includes(o))}return r},totalPages:t=>Math.ceil(t.pagination.total/t.pagination.limit)||1},actions:{async fetchWorkflows(t={}){this.loading=!0,this.error=null;try{const r={limit:this.pagination.limit,offset:(this.pagination.page-1)*this.pagination.limit,status:this.filters.status,...t},o=await e.getWorkflows(r);return this.workflows=o.data||[],this.pagination.total=o.total||0,o}catch(r){throw console.error("获取工作流列表失败:",r),this.error=r.message||"获取工作流列表失败",r}finally{this.loading=!1}},async fetchWorkflowById(t){this.loading=!0,this.error=null;try{const r=await e.getWorkflow(t);this.currentWorkflow=r;const o=this.workflows.findIndex(s=>s.id===t);return o!==-1&&(this.workflows[o]=r),r}catch(r){throw console.error(`获取工作流 #${t} 失败:`,r),this.error=r.message||"获取工作流详情失败",r}finally{this.loading=!1}},async createWorkflow(t){this.loading=!0,this.error=null;try{const r=await e.createWorkflow(t);return this.workflows.unshift(r),this.pagination.total+=1,r}catch(r){throw console.error("创建工作流失败:",r),this.error=r.message||"创建工作流失败",r}finally{this.loading=!1}},async updateWorkflow(t,r){this.loading=!0,this.error=null;try{const o=await e.updateWorkflow(t,r),s=this.workflows.findIndex(i=>i.id===t);return s!==-1&&(this.workflows[s]=o),this.currentWorkflow&&this.currentWorkflow.id===t&&(this.currentWorkflow=o),o}catch(o){throw console.error(`更新工作流 #${t} 失败:`,o),this.error=o.message||"更新工作流失败",o}finally{this.loading=!1}},async deleteWorkflow(t){this.loading=!0,this.error=null;try{await e.deleteWorkflow(t),this.workflows=this.workflows.filter(r=>r.id!==t),this.pagination.total-=1,this.currentWorkflow&&this.currentWorkflow.id===t&&(this.currentWorkflow=null)}catch(r){throw console.error(`删除工作流 #${t} 失败:`,r),this.error=r.message||"删除工作流失败",r}finally{this.loading=!1}},async executeWorkflow(t,r={}){this.loading=!0,this.error=null;try{return await e.executeWorkflow(t,r)}catch(o){throw console.error(`执行工作流 #${t} 失败:`,o),this.error=o.message||"执行工作流失败",o}finally{this.loading=!1}},setPage(t){t>=1&&t<=this.totalPages&&(this.pagination.page=t,this.fetchWorkflows())},setLimit(t){this.pagination.limit=t,this.pagination.page=1,this.fetchWorkflows()},setFilter(t){this.filters={...this.filters,...t},this.pagination.page=1,this.fetchWorkflows()},clearFilters(){this.filters={status:"",search:""},this.fetchWorkflows()}}});export{n as u};
